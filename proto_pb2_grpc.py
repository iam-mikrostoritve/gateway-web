# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto_pb2 as proto__pb2


class ArtistGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAll = channel.unary_stream(
                '/ArtistGrpcService/GetAll',
                request_serializer=proto__pb2.Empty.SerializeToString,
                response_deserializer=proto__pb2.ArtistProto.FromString,
                )
        self.GetById = channel.unary_unary(
                '/ArtistGrpcService/GetById',
                request_serializer=proto__pb2.ArtistIdProto.SerializeToString,
                response_deserializer=proto__pb2.ArtistProto.FromString,
                )
        self.Insert = channel.unary_unary(
                '/ArtistGrpcService/Insert',
                request_serializer=proto__pb2.InsertArtistProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )
        self.Delete = channel.unary_unary(
                '/ArtistGrpcService/Delete',
                request_serializer=proto__pb2.ArtistIdProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )


class ArtistGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtistGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAll': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=proto__pb2.Empty.FromString,
                    response_serializer=proto__pb2.ArtistProto.SerializeToString,
            ),
            'GetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetById,
                    request_deserializer=proto__pb2.ArtistIdProto.FromString,
                    response_serializer=proto__pb2.ArtistProto.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=proto__pb2.InsertArtistProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=proto__pb2.ArtistIdProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ArtistGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtistGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ArtistGrpcService/GetAll',
            proto__pb2.Empty.SerializeToString,
            proto__pb2.ArtistProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistGrpcService/GetById',
            proto__pb2.ArtistIdProto.SerializeToString,
            proto__pb2.ArtistProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistGrpcService/Insert',
            proto__pb2.InsertArtistProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistGrpcService/Delete',
            proto__pb2.ArtistIdProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RecordGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAll = channel.unary_stream(
                '/RecordGrpcService/GetAll',
                request_serializer=proto__pb2.Empty.SerializeToString,
                response_deserializer=proto__pb2.RecordProto.FromString,
                )
        self.GetById = channel.unary_unary(
                '/RecordGrpcService/GetById',
                request_serializer=proto__pb2.RecordIdProto.SerializeToString,
                response_deserializer=proto__pb2.RecordProto.FromString,
                )
        self.Insert = channel.unary_unary(
                '/RecordGrpcService/Insert',
                request_serializer=proto__pb2.InsertRecordProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )
        self.UpdateQuantity = channel.unary_unary(
                '/RecordGrpcService/UpdateQuantity',
                request_serializer=proto__pb2.UpdateQuantityRequestProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )
        self.UpdatePrice = channel.unary_unary(
                '/RecordGrpcService/UpdatePrice',
                request_serializer=proto__pb2.UpdatePriceRequestProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )
        self.Delete = channel.unary_unary(
                '/RecordGrpcService/Delete',
                request_serializer=proto__pb2.RecordIdProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )


class RecordGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuantity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecordGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAll': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=proto__pb2.Empty.FromString,
                    response_serializer=proto__pb2.RecordProto.SerializeToString,
            ),
            'GetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetById,
                    request_deserializer=proto__pb2.RecordIdProto.FromString,
                    response_serializer=proto__pb2.RecordProto.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=proto__pb2.InsertRecordProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
            'UpdateQuantity': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuantity,
                    request_deserializer=proto__pb2.UpdateQuantityRequestProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
            'UpdatePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrice,
                    request_deserializer=proto__pb2.UpdatePriceRequestProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=proto__pb2.RecordIdProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RecordGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecordGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RecordGrpcService/GetAll',
            proto__pb2.Empty.SerializeToString,
            proto__pb2.RecordProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecordGrpcService/GetById',
            proto__pb2.RecordIdProto.SerializeToString,
            proto__pb2.RecordProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecordGrpcService/Insert',
            proto__pb2.InsertRecordProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateQuantity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecordGrpcService/UpdateQuantity',
            proto__pb2.UpdateQuantityRequestProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecordGrpcService/UpdatePrice',
            proto__pb2.UpdatePriceRequestProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecordGrpcService/Delete',
            proto__pb2.RecordIdProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LabelGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAll = channel.unary_stream(
                '/LabelGrpcService/GetAll',
                request_serializer=proto__pb2.Empty.SerializeToString,
                response_deserializer=proto__pb2.LabelProto.FromString,
                )
        self.GetById = channel.unary_unary(
                '/LabelGrpcService/GetById',
                request_serializer=proto__pb2.LabelIdProto.SerializeToString,
                response_deserializer=proto__pb2.LabelProto.FromString,
                )
        self.Insert = channel.unary_unary(
                '/LabelGrpcService/Insert',
                request_serializer=proto__pb2.InsertLabelProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )
        self.Delete = channel.unary_unary(
                '/LabelGrpcService/Delete',
                request_serializer=proto__pb2.LabelIdProto.SerializeToString,
                response_deserializer=proto__pb2.Empty.FromString,
                )


class LabelGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LabelGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAll': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=proto__pb2.Empty.FromString,
                    response_serializer=proto__pb2.LabelProto.SerializeToString,
            ),
            'GetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetById,
                    request_deserializer=proto__pb2.LabelIdProto.FromString,
                    response_serializer=proto__pb2.LabelProto.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=proto__pb2.InsertLabelProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=proto__pb2.LabelIdProto.FromString,
                    response_serializer=proto__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LabelGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LabelGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/LabelGrpcService/GetAll',
            proto__pb2.Empty.SerializeToString,
            proto__pb2.LabelProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LabelGrpcService/GetById',
            proto__pb2.LabelIdProto.SerializeToString,
            proto__pb2.LabelProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LabelGrpcService/Insert',
            proto__pb2.InsertLabelProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LabelGrpcService/Delete',
            proto__pb2.LabelIdProto.SerializeToString,
            proto__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
